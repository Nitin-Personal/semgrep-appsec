name: Semgrep Coverage Report

on:
  # Scan on-demand through GitHub Actions interface:
  workflow_dispatch: {}
  # Schedule the CI job (this method uses cron syntax):
  schedule:
    - cron: '20 17 * * *' # Sets Semgrep to scan every day at 17:20 UTC.

jobs:
  get-list-of-repos:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install requests
        pip install pandas
        
    - name: Get list of repositories
      env:
        # Generate PAT with Read-Only access to all repos in your GH ORG
        PAT_READ_ONLY_CUSTOMER_REPO: ${{ secrets.PAT_READ_ONLY_CUSTOMER_REPO }}
        SEMGREP_API_WEB_TOKEN:  ${{ secrets.SEMGREP_API_WEB_TOKEN }}
        SEMGREP_DEPLOYMENT_SLUG: ${{ vars.SEMGREP_DEPLOYMENT_SLUG }}

      run: |
        import requests
        import os
        import requests
        import logging
        import time
        import pandas as pd
      
        # Set up logging
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
                 

        # GitHub repository in the format "org_name/repo_name"
        full_repo_name = os.environ['GITHUB_REPOSITORY']
        # Extract the organization name
        org_name = full_repo_name.split('/')[0]
        print("Organization Name:", org_name)
        pat = os.environ['PAT_READ_ONLY_CUSTOMER_REPO']
        headers = {'Authorization': f'token {pat}'}

        response = requests.get(f'https://api.github.com/orgs/{org_name}/repos', headers=headers)
        repos = response.json()

        # Read the CSV files
        daily_df = pd.read_csv('daily.csv', header=None)
        weekly_df = pd.read_csv('weekly.csv', header=None)
        
        # Convert to lists for easier checking
        daily_repos = daily_df[0].tolist()
        weekly_repos = weekly_df[0].tolist()

        headers = {"Accept": "application/json", "Authorization": "Bearer " + os.environ['SEMGREP_API_WEB_TOKEN']}
        params =  {"page_size": 3000}
    
        semgrep_response = requests.get(f"https://semgrep.dev/api/v1/deployments/{os.environ['SEMGREP_DEPLOYMENT_SLUG'] }/projects?page=0",params=params ,headers=headers)
        if r.status_code != 200:
            sys.exit(f'Get failed: {r.text}')
        semgrep_repos = json.loads(r.text)   
        print(semgrep_repos)

        # Read the CSV files
        daily_df = pd.read_csv('daily.csv', header=None)
        weekly_df = pd.read_csv('weekly.csv', header=None)
        
        # Prepare the data for the new CSV file
        coverage_data = []
        
        for repo in repos:
            repo_name = repo['name']
            repo_full_name = repo['full_name']
            created_at = repo['created_at']
            html_url = repo['html_url']
            
            latest_scan = None
            for sg_repo in semgrep_repos:
                print(sg_repo['name'])
                if sg_repo['name'] == repo_full_name:
                    latest_scan = sg_repo['latest_scan_at']
                    break
            
            if latest_scan:
                print(f"Latest scan date for {repo_name}- {latest_scan}")
            else:
                print(f"{repo_name} not scanned by Semgrep yet")            
            
            daily_mark = 1 if repo_name in daily_repos else 0
            weekly_mark = 1 if repo_name in weekly_repos else 0
            not_covered = 1 if (daily_mark+weekly_mark == 0) else 0
            duplicate_scans = 1 if (daily_mark+weekly_mark == 2) else 0            
            coverage_data.append([repo_name, daily_mark, weekly_mark, not_covered, duplicate_scans, latest_scan, created_at, html_url])
        
        # Create a DataFrame and write to CSV
        coverage_df = pd.DataFrame(coverage_data, columns=['Repository', 'Daily', 'Weekly', 'Not Covered', 'Duplicate Scans', 'Latest Scan', 'Created At', 'URL'])
        coverage_df.to_csv('coverage.csv', index=False)
      shell: python
      
    - name: Upload coverage.CSV as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: semgrep-coverage-report.csv
        path: coverage.csv  # Replace with the path to your CSV file
